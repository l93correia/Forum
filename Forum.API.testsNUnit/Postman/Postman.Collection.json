{
	"info": {
		"_postman_id": "72108d52-8bb8-4f16-b273-dcf61194a5d9",
		"name": "Discussions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Discussions",
			"item": [
				{
					"name": "CreateDiscussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b5d427-dec2-4075-afa7-29098dda9b67",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.subject).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.user).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"new test\",\n    \"comment\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions"
							]
						},
						"description": "CreateDiscussion"
					},
					"response": []
				},
				{
					"name": "CreateDiscussion-RequiredBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b5d427-dec2-4075-afa7-29098dda9b67",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.errors.Subject.toString()).to.eql('The Subject field is required.');\r",
									"    pm.expect(jsonData.errors.Comment.toString()).to.eql('The Comment field is required.');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"subject\": null,\n        \"comment\": null,\n        \"userId\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions"
							]
						},
						"description": "CreateDiscussion"
					},
					"response": []
				},
				{
					"name": "GetAllDiscussions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04a372ac-05d2-4858-b775-00f0560ef292",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(function(discussion){\r",
									"        pm.expect(discussion.subject).to.not.eql(null);\r",
									"        pm.expect(discussion.comment).to.not.eql(null);\r",
									"        pm.expect(discussion.username).to.not.eql(null);\r",
									"        pm.expect(discussion.createdDate).to.not.eql(null);\r",
									"        pm.expect(discussion.status).to.not.eql(null);\r",
									"        pm.expect(discussion.responseCount).to.not.eql(null);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions"
							]
						},
						"description": "GetAll"
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "203c3e8e-6c2d-4ac2-8a57-6fa48805e34d",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.subject).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.username).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "get by id not found"
					},
					"response": []
				},
				{
					"name": "GetById-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "UserId",
								"type": "text",
								"value": "10"
							},
							{
								"key": "GroupId",
								"type": "text",
								"value": "[1,2,3,4,5]",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"type": "text",
								"value": "[1,2,3,4,5]",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById-IdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "203c3e8e-6c2d-4ac2-8a57-6fa48805e34d",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return not found!\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e6bb295-6127-4198-bfd4-7080e2195da7",
								"exec": [
									"pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "get by id not found"
					},
					"response": []
				},
				{
					"name": "UpdateDiscussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069d9373-64e1-4631-ad61-b7ca1dcf8c9a",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.subject).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.user).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"subject\": \"update1\",\n    \"comment\": \"update1\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "UpdateDiscussion"
					},
					"response": []
				},
				{
					"name": "UpdateDiscussion-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"type": "text",
								"value": "10"
							},
							{
								"key": "GroupId",
								"type": "text",
								"value": "[1,2,3,4,5]",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"type": "text",
								"value": "[1,2,3,4,5]",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"subject\": \"update1\",\n    \"comment\": \"update1\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateDiscussion-RequiredBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069d9373-64e1-4631-ad61-b7ca1dcf8c9a",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.errors.Subject.toString()).to.eql('The Subject field is required.');\r",
									"    pm.expect(jsonData.errors.Comment.toString()).to.eql('The Comment field is required.');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"subject\": null,\n    \"comment\": null\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "UpdateDiscussion"
					},
					"response": []
				},
				{
					"name": "UpdateDiscussion-NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069d9373-64e1-4631-ad61-b7ca1dcf8c9a",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"    pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") - 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c447ed0-b8a9-420c-8a18-852a6e9d79f2",
								"exec": [
									"pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"subject\": \"test\",\n    \"comment\": \"test\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "UpdateDiscussion"
					},
					"response": []
				},
				{
					"name": "DeleteDiscussion-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "UserId",
								"type": "text",
								"value": "10"
							},
							{
								"key": "GroupId",
								"type": "text",
								"value": "[1,2,3,4,5]",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"type": "text",
								"value": "[1,2,3,4,5]",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteDiscussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e49f12-4092-44ad-a47a-6b6ae7311d9a",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "DeleteDiscussion"
					},
					"response": []
				},
				{
					"name": "DeleteDiscussion-NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e49f12-4092-44ad-a47a-6b6ae7311d9a",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return not found!\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "af13fcc2-8d73-472f-9ae4-bd7620296c30",
								"exec": [
									"pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "DeleteDiscussion"
					},
					"response": []
				},
				{
					"name": "GetByDiscussionId-DiscussionRemoved",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "203c3e8e-6c2d-4ac2-8a57-6fa48805e34d",
								"exec": [
									"pm.test(\"response must be valid\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return not found!\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b25c018e-42df-41c4-a591-44dcde806c4a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}"
							]
						},
						"description": "get by id not found"
					},
					"response": []
				}
			]
		},
		{
			"name": "Responses",
			"item": [
				{
					"name": "CreateDiscussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b5d427-dec2-4075-afa7-29098dda9b67",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.subject).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.user).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"test\",\n    \"comment\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions"
							]
						},
						"description": "CreateDiscussion"
					},
					"response": []
				},
				{
					"name": "CreateResponse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ceca10-62c0-406f-92e7-d840663389d6",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"responseId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.username).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDates).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c8208fda-10d3-4108-a29b-fb63c67937fb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Sufficient motionless compliment by stimulated assistance at. Convinced resolving extensive agreeable in it on as remainder. Cordially say affection met who propriety him. Are man she towards private weather pleased.\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses"
							]
						},
						"description": "CreateResponse"
					},
					"response": []
				},
				{
					"name": "DeleteResponse-Unauthorized Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Sufficient motionless compliment by stimulated assistance at. Convinced resolving extensive agreeable in it on as remainder. Cordially say affection met who propriety him. Are man she towards private weather pleased.\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateResponse-DiscussionNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ceca10-62c0-406f-92e7-d840663389d6",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be Not Found\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    \r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "170a63e6-e3fe-4776-bd5d-a6bd03497191",
								"exec": [
									"pm.environment.set(\"discussionId\", (pm.environment.get(\"discussionId\") + 1));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"Sufficient motionless compliment by stimulated assistance at. Convinced resolving extensive agreeable in it on as remainder. Cordially say affection met who propriety him. Are man she towards private weather pleased.\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses"
							]
						},
						"description": "CreateResponse"
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e20f6ab-2c5e-4329-b3f8-6f973f4fed71",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.username).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "GetAllByDiscussion, GetAll, Get"
					},
					"response": []
				},
				{
					"name": "GetByDiscussionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e20f6ab-2c5e-4329-b3f8-6f973f4fed71",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.username).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses"
							]
						},
						"description": "GetAllByDiscussion, GetAll, Get"
					},
					"response": []
				},
				{
					"name": "GetById-IdNotFound",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "66e20f86-58d1-4280-bb72-6638815887eb",
								"exec": [
									"pm.environment.set(\"responseId\", (pm.environment.get(\"responseId\") + 1));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5977f6b-051f-4e81-8623-590b5ba5bad7",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    \r",
									"    pm.expect(pm.response.text()).to.eql('The Response does not exist.');\r",
									"    \r",
									"    pm.environment.set(\"responseId\", (pm.environment.get(\"responseId\") - 1));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "GetAllByDiscussion, GetAll, Get"
					},
					"response": []
				},
				{
					"name": "DeleteResponse-Unauthorized Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateResponse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dc97a97-ef4a-43b5-885e-5bf192a95357",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.userId).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.updatedDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comment\": \"updated\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "UpdateResponse"
					},
					"response": []
				},
				{
					"name": "DeleteResponse-Unauthorized Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comment\": \"updated\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateResponse-RequiredBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dc97a97-ef4a-43b5-885e-5bf192a95357",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.errors.Comment.toString()).to.eql('The Comment field is required.');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comment\": null\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "UpdateResponse"
					},
					"response": []
				},
				{
					"name": "UpdateResponse-NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dc97a97-ef4a-43b5-885e-5bf192a95357",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Response does not exist.');\r",
									"    pm.environment.set(\"responseId\", pm.environment.get(\"responseId\") - 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ab2a118e-becf-40ec-a586-a10835148f2f",
								"exec": [
									"pm.environment.set(\"responseId\", pm.environment.get(\"responseId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comment\": \"updated\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "UpdateResponse"
					},
					"response": []
				},
				{
					"name": "DeleteResponse-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteResponse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30809a24-2d6b-47bd-8bab-0784ed758b66",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "DeleteResponse"
					},
					"response": []
				},
				{
					"name": "DeleteResponse-NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30809a24-2d6b-47bd-8bab-0784ed758b66",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Response does not exist.');\r",
									"    pm.environment.set(\"responseId\", pm.environment.get(\"responseId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5580cd55-6456-4786-b389-2d4c9a0ce2de",
								"exec": [
									"pm.environment.set(\"responseId\", pm.environment.get(\"responseId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/responses/{{responseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"responses",
								"{{responseId}}"
							]
						},
						"description": "DeleteResponse"
					},
					"response": []
				}
			]
		},
		{
			"name": "Attachments",
			"item": [
				{
					"name": "CreateDiscussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b5d427-dec2-4075-afa7-29098dda9b67",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.subject).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.user).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"test\",\n    \"comment\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\",\n    \"userId\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions"
							]
						},
						"description": "CreateDiscussion"
					},
					"response": []
				},
				{
					"name": "CreateAttachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dd86342-047e-4166-ae3e-52ac0f4a90c9",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"attachmentId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.id).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.externalId).to.not.eql(null);\r",
									"    pm.expect(jsonData.url).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"externalId\": 4,\n\t\"url\": \"http\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllByDiscussionAttachment-Unauthorized Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"externalId\": 4,\n\t\"url\": \"http\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateAttachment-DiscussionNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dd86342-047e-4166-ae3e-52ac0f4a90c9",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be Not Found\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    \r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd1704aa-38f0-43a6-936e-6b3964aa0dc1",
								"exec": [
									"pm.environment.set(\"discussionId\", (pm.environment.get(\"discussionId\") + 1));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"externalId\": 4,\n\t\"url\": \"http\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments"
							]
						},
						"description": "CreateResponse"
					},
					"response": []
				},
				{
					"name": "GetAllByDiscussionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.id).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.externalId).to.not.eql(null);\r",
									"    pm.expect(jsonData.url).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllByDiscussionAttachment-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateAttachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dc97a97-ef4a-43b5-885e-5bf192a95357",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.id).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.externalId).to.not.eql(null);\r",
									"    pm.expect(jsonData.url).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"externalId\": 2,\n\t\"url\": \"www\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments/{{attachmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments",
								"{{attachmentId}}"
							]
						},
						"description": "UpdateResponse"
					},
					"response": []
				},
				{
					"name": "UpdateAttachment-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"externalId\": 2,\n\t\"url\": \"www\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments/{{attachmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments",
								"{{attachmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAttachment-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments/{{attachmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments",
								"{{attachmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAttachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30809a24-2d6b-47bd-8bab-0784ed758b66",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments/{{attachmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments",
								"{{attachmentId}}"
							]
						},
						"description": "DeleteResponse"
					},
					"response": []
				},
				{
					"name": "DeleteAttachment-NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30809a24-2d6b-47bd-8bab-0784ed758b66",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Attachment does not exist.');\r",
									"    pm.environment.set(\"attachmentId\", pm.environment.get(\"attachmentId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5580cd55-6456-4786-b389-2d4c9a0ce2de",
								"exec": [
									"pm.environment.set(\"attachmentId\", pm.environment.get(\"attachmentId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/attachments/{{attachmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"attachments",
								"{{attachmentId}}"
							]
						},
						"description": "DeleteResponse"
					},
					"response": []
				}
			]
		},
		{
			"name": "Participants",
			"item": [
				{
					"name": "CreateDiscussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b5d427-dec2-4075-afa7-29098dda9b67",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.subject).to.not.eql(null);\r",
									"    pm.expect(jsonData.comment).to.not.eql(null);\r",
									"    pm.expect(jsonData.user).to.not.eql(null);\r",
									"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
									"    pm.expect(jsonData.status).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"test\",\n    \"comment\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\",\n    \"userId\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions"
							]
						},
						"description": "CreateDiscussion"
					},
					"response": []
				},
				{
					"name": "CreateParticipant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dd86342-047e-4166-ae3e-52ac0f4a90c9",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.environment.set(\"participantId\", jsonData.id);\r",
									"    \r",
									"    pm.expect(jsonData.id).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.entityId).to.not.eql(null);\r",
									"    pm.expect(jsonData.entityType).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"entityId\": 4,\n\t\"entityType\": \"user\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateParticipant-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"entityId\": 4,\n\t\"entityType\": \"user\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Createparticipant-DiscussionNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ceca10-62c0-406f-92e7-d840663389d6",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be Not Found\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    \r",
									"    pm.expect(pm.response.text()).to.eql('The Discussion does not exist.');\r",
									"    \r",
									"    pm.environment.set(\"discussionId\", pm.environment.get(\"discussionId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "170a63e6-e3fe-4776-bd5d-a6bd03497191",
								"exec": [
									"pm.environment.set(\"discussionId\", (pm.environment.get(\"discussionId\") + 1));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"comment\": \"Sufficient motionless compliment by stimulated assistance at. Convinced resolving extensive agreeable in it on as remainder. Cordially say affection met who propriety him. Are man she towards private weather pleased.\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants"
							]
						},
						"description": "CreateResponse"
					},
					"response": []
				},
				{
					"name": "GetAllByDiscussionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.id).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.entityId).to.not.eql(null);\r",
									"    pm.expect(jsonData.entityType).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllByDiscussionId-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "UserId",
								"value": "{{userIdNotAllowed}}",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "{{GroupsId}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "{{OrganizationsId}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateParticipant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dc97a97-ef4a-43b5-885e-5bf192a95357",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    var  jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.id).to.not.eql(null);\r",
									"    pm.expect(jsonData.discussionId).to.not.eql(null);\r",
									"    pm.expect(jsonData.entityId).to.not.eql(null);\r",
									"    pm.expect(jsonData.entityType).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"entityId\": 2,\n\t\"entityType\": \"user\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants/{{participantId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants",
								"{{participantId}}"
							]
						},
						"description": "UpdateResponse"
					},
					"response": []
				},
				{
					"name": "UpdateParticipant-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"entityId\": 2,\n\t\"entityType\": \"user\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants/{{participantId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants",
								"{{participantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteParticipant-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d137e67-39a9-4985-b304-7e0aec57d1b5",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Return is ok!\", function (){\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "UserId",
								"value": "10",
								"type": "text"
							},
							{
								"key": "GroupId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "OrganizationId",
								"value": "[1,2,3,4,5]",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants/{{participantId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants",
								"{{participantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteParticipant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30809a24-2d6b-47bd-8bab-0784ed758b66",
								"exec": [
									"// example using pm.response.to.be*\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     // assert that the status code is 200\r",
									"     pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants/{{participantId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants",
								"{{participantId}}"
							]
						},
						"description": "DeleteResponse"
					},
					"response": []
				},
				{
					"name": "DeleteParticipant-NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30809a24-2d6b-47bd-8bab-0784ed758b66",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Required not null\", function (){\r",
									"    pm.expect(pm.response.text()).to.eql('The Participant does not exist.');\r",
									"    pm.environment.set(\"participantId\", pm.environment.get(\"participantId\") - 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5580cd55-6456-4786-b389-2d4c9a0ce2de",
								"exec": [
									"pm.environment.set(\"participantId\", pm.environment.get(\"participantId\") + 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/discussions/{{discussionId}}/participants/{{participantId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"discussions",
								"{{discussionId}}",
								"participants",
								"{{participantId}}"
							]
						},
						"description": "DeleteResponse"
					},
					"response": []
				}
			]
		}
	]
}